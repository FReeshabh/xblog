<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://freeshabh.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://freeshabh.github.io/blog/" rel="alternate" type="text/html" /><updated>2020-02-26T17:56:13-06:00</updated><id>https://freeshabh.github.io/blog/feed.xml</id><title type="html">Rishabh Tewari</title><subtitle>CS/ML/Comedic Fool</subtitle><entry><title type="html">Title</title><link href="https://freeshabh.github.io/blog/2020/02/25/Incomplete-Starter-Linear-Regression.html" rel="alternate" type="text/html" title="Title" /><published>2020-02-25T00:00:00-06:00</published><updated>2020-02-25T00:00:00-06:00</updated><id>https://freeshabh.github.io/blog/2020/02/25/Incomplete-Starter-Linear-Regression</id><content type="html" xml:base="https://freeshabh.github.io/blog/2020/02/25/Incomplete-Starter-Linear-Regression.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-02-25-Incomplete-Starter-Linear-Regression.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;A-traditional-yet-actual-intro-to-ML-(with-code!,-from-scratch!)&quot;&gt;A traditional yet actual intro to ML (with code!, from scratch!)&lt;a class=&quot;anchor-link&quot; href=&quot;#A-traditional-yet-actual-intro-to-ML-(with-code!,-from-scratch!)&quot;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;In this tutorial, we'll be looking at the baby stuff for ML, which will be Linear Regression. But we'll look into implementing it from scratch. So we're not going to use any Machine Learning Libraries. 
The only library use for the actual Regression part of this will be numpy (refer to &lt;a href=&quot;https://cs231n.github.io/python-numpy-tutorial/#numpy&quot;&gt;CS 231N's excellent notes&lt;/a&gt;, for a quick intro). This tutorial contains code from Python, so I expect a bit of familiarity with how Python works, if not check the link above for a quick intro.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Prereqs and what we need:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;High School Math&lt;/li&gt;
&lt;li&gt;A tiny bit of linear algebra&lt;/li&gt;
&lt;li&gt;Python Knowledge&lt;ul&gt;
&lt;li&gt;Numpy (For computation)&lt;/li&gt;
&lt;li&gt;Matplotlib (For graphing our results)&lt;/li&gt;
&lt;li&gt;pandas (to read our file)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What we'll do:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Implement a Closed Form Solution for the simplest of Linear Regressions&lt;/li&gt;
&lt;li&gt;What we did earlier, but now using Gradient Descent&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Setup&quot;&gt;Setup&lt;a class=&quot;anchor-link&quot; href=&quot;#Setup&quot;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# This Python 3 environment comes with many helpful analytics libraries installed&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# For example, here&amp;#39;s several helpful packages to load in &lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# linear algebra&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# data processing, CSV file I/O (e.g. pd.read_csv)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Input data files are available in the &amp;quot;../input/&amp;quot; directory.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/kaggle/input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Any results you write to the current directory are saved as output.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;/kaggle/input/proj1-dataset/proj1Dataset.csv
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Prepping-the-data&quot;&gt;Prepping the data&lt;a class=&quot;anchor-link&quot; href=&quot;#Prepping-the-data&quot;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Here we're reading our dataset. The dataset I'm using for this project is the carbig dataset, that's already available in Matlab, this dataset is relatively simple and the description here says: Measurements of cars, 1970â€“1982&lt;a href=&quot;http://&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proj1Dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../input/proj1-dataset/proj1Dataset.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Now we apply Linear regression to this right? Actually not just yet. We need to take out the data from our dataset and make it usable. We also see it's missing a few values in the Horsepower column. So we have to deal with that.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Assign Data to variables&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbig_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Weight&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;carbig_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbig_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carbig_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Replacing missing values with the median&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbig_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_text output_error&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;ansi-red-fg&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;ansi-red-fg&quot;&gt;NameError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class=&quot;ansi-green-fg&quot;&gt;&amp;lt;ipython-input-3-91fd4f4532fb&amp;gt;&lt;/span&gt; in &lt;span class=&quot;ansi-cyan-fg&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt;      1&lt;/span&gt; &lt;span class=&quot;ansi-red-fg&quot;&gt;# Assign Data to variables&lt;/span&gt;
&lt;span class=&quot;ansi-green-fg&quot;&gt;----&amp;gt; 2&lt;/span&gt;&lt;span class=&quot;ansi-red-fg&quot;&gt; &lt;/span&gt;X &lt;span class=&quot;ansi-blue-fg&quot;&gt;=&lt;/span&gt; carbig_data&lt;span class=&quot;ansi-blue-fg&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;&amp;#39;Weight&amp;#39;&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt;      3&lt;/span&gt; carbig_data&lt;span class=&quot;ansi-blue-fg&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ansi-blue-fg&quot;&gt;=&lt;/span&gt; carbig_data&lt;span class=&quot;ansi-blue-fg&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;.&lt;/span&gt;fillna&lt;span class=&quot;ansi-blue-fg&quot;&gt;(&lt;/span&gt;carbig_data&lt;span class=&quot;ansi-blue-fg&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;.&lt;/span&gt;median&lt;span class=&quot;ansi-blue-fg&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ansi-red-fg&quot;&gt;#Replacing missing values with the median&lt;/span&gt;
&lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt;      4&lt;/span&gt; t_target &lt;span class=&quot;ansi-blue-fg&quot;&gt;=&lt;/span&gt; carbig_data&lt;span class=&quot;ansi-blue-fg&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;&amp;#39;Horsepower&amp;#39;&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;ansi-red-fg&quot;&gt;NameError&lt;/span&gt;: name &amp;#39;carbig_data&amp;#39; is not defined&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;So in the previous step, we took care of the missing values by replacing them with the median of the Horsepower column. And assigned our X and t variables. X is basically like the X axis you see in Math Textbooks, and T will be our target, or just like the y axis you see in Math Textbooks. (Keep in mind, we're not using a test dataset in this tutorial - to know what that means please check &lt;a href=&quot;https://developers.google.com/machine-learning/crash-course/training-and-test-sets/splitting-data&quot;&gt;this&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So now we apply Linear Regression right?&lt;/em&gt; Nope not yet, if you carefully check the np arrays we store the data in (Hint: check the &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html&quot;&gt;shape&lt;/a&gt;) You'll realize that we actually can't use this data. Because it's not in the shape we want it to be for the Multiplication that's coming soon! So, we need to reshape it!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Reshape and prep X, and X_norm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#X_norm = np.empty(X.shape) #What are these (Look up Normalization, but we&amp;#39;ll get back to these)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#X_norm = X/X.max()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_text output_error&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;ansi-red-fg&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;ansi-red-fg&quot;&gt;NameError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class=&quot;ansi-green-fg&quot;&gt;&amp;lt;ipython-input-4-e8b58bd712ad&amp;gt;&lt;/span&gt; in &lt;span class=&quot;ansi-cyan-fg&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt;      1&lt;/span&gt; &lt;span class=&quot;ansi-red-fg&quot;&gt;# Reshape and prep X, and X_norm&lt;/span&gt;
&lt;span class=&quot;ansi-green-fg&quot;&gt;----&amp;gt; 2&lt;/span&gt;&lt;span class=&quot;ansi-red-fg&quot;&gt; &lt;/span&gt;X &lt;span class=&quot;ansi-blue-fg&quot;&gt;=&lt;/span&gt; np&lt;span class=&quot;ansi-blue-fg&quot;&gt;.&lt;/span&gt;reshape&lt;span class=&quot;ansi-blue-fg&quot;&gt;(&lt;/span&gt;X&lt;span class=&quot;ansi-blue-fg&quot;&gt;.&lt;/span&gt;values&lt;span class=&quot;ansi-blue-fg&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ansi-blue-fg&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ansi-cyan-fg&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ansi-cyan-fg&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt;      3&lt;/span&gt; &lt;span class=&quot;ansi-red-fg&quot;&gt;#X_norm = np.empty(X.shape) #What are these (Look up Normalization, but we&amp;#39;ll get back to these)&lt;/span&gt;
&lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt;      4&lt;/span&gt; &lt;span class=&quot;ansi-red-fg&quot;&gt;#X_norm = X/X.max()&lt;/span&gt;
&lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt;      5&lt;/span&gt; t_target &lt;span class=&quot;ansi-blue-fg&quot;&gt;=&lt;/span&gt; np&lt;span class=&quot;ansi-blue-fg&quot;&gt;.&lt;/span&gt;reshape&lt;span class=&quot;ansi-blue-fg&quot;&gt;(&lt;/span&gt;t_target&lt;span class=&quot;ansi-blue-fg&quot;&gt;.&lt;/span&gt;values&lt;span class=&quot;ansi-blue-fg&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ansi-blue-fg&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ansi-cyan-fg&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ansi-cyan-fg&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ansi-blue-fg&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;ansi-red-fg&quot;&gt;NameError&lt;/span&gt;: name &amp;#39;X&amp;#39; is not defined&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;[Incomplete-..-Wait-for-the-update]&quot;&gt;[Incomplete .. Wait for the update]&lt;a class=&quot;anchor-link&quot; href=&quot;#[Incomplete-..-Wait-for-the-update]&quot;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Busy with school work, it will be updated soon, don't worry&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Experience with Standup comedy after 4-5 months</title><link href="https://freeshabh.github.io/blog/comedy/2020/02/13/Standup-Comedy-Experience-After-4-5-months.html" rel="alternate" type="text/html" title="Experience with Standup comedy after 4-5 months" /><published>2020-02-13T00:00:00-06:00</published><updated>2020-02-13T00:00:00-06:00</updated><id>https://freeshabh.github.io/blog/comedy/2020/02/13/Standup-Comedy-Experience-After-4-5-months</id><content type="html" xml:base="https://freeshabh.github.io/blog/comedy/2020/02/13/Standup-Comedy-Experience-After-4-5-months.html">&lt;p&gt;I find it quite funny, that after finally setting on a blog style, specifically made for Machine Learning and Data Science style. I choose to write the first blog on here on Standup Comedy instead and my experience with it so far.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog-1-standup/mic.jpeg&quot; alt=&quot;&quot; title=&quot;Standup Comedy Mic&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-into-standup-comedy&quot;&gt;Getting into Standup Comedy&lt;/h2&gt;
&lt;p&gt;Iâ€™ve loved standup comedy for quite some time, comedians like &lt;a href=&quot;https://en.wikipedia.org/wiki/Dave_Chappelle&quot;&gt;Dave Chappelle&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/George_Carlin&quot;&gt;George Carlin&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Louis_C.K.&quot;&gt;Louis C.K.&lt;/a&gt; were some of my initial favorites in American Standup Comedy, and obviously &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_stand-up_comedians&quot;&gt;thereâ€™s many, many more..&lt;/a&gt;, but Iâ€™m not going to list them, cause whatâ€™s the point?&lt;/p&gt;

&lt;p&gt;My first try at standup comedy was my second semester of freshmen year of College, which was an Open Mic Night within the University. I went twice, bombed horribly, no timing, somewhat plagiarized jokes (on the advice of my roommate). And basically it was bad, but I didnâ€™t feel like it was a bad experience, since going up on the stage, in some ways or the other, gives me a confidence boost. And then I didnâ€™t do it anything until the next academic year.&lt;/p&gt;

&lt;p&gt;The push for actually doing standup comedy instead of just fantasizing about doing it came from a TV show and a movie,  being Marvelous Mrs. Maisel, and the Big Sick (I donâ€™t know why this pushed me to do comedy, but it did). Also with the massive boredom I was facing in my life. Then I found out about a local scene happening from the local subreddit and started going to them. First Mic was a bomb, but the second one went alright.&lt;/p&gt;

&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Youâ€™ll never be for everyone&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;And thatâ€™s okay! Your goal is to make people laugh, not make all the people laugh. Some people wonâ€™t appreciate your jokes, some will find them offensive and tasteless. Whatâ€™s funny is different for everybody! Some time itâ€™s the audience, some time, itâ€™s just you who sucks, know which ones which.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Donâ€™t insult people! (Or the venue youâ€™re at, or the other comedians)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Light Batter, and some passing jokes are fine, but picking someone in the audience and just roasting(read insulting) them cause theyâ€™re fat or just look peculiar (this advice doesnâ€™t neccessarily apply to clothes and stuff), when theyâ€™ve been nothing but nice to you, just cause you think it will get you a few laughs. Donâ€™t do that! Please.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stick around for a little bit after the show&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I think Standup comedy, can just be a great social experience. You get to meet people all from very different backgrounds as you, with the common love for Comedy, or at least seeing people laugh which I think is a great thing. See if thereâ€™s anyone doing a podcast, or anything new with their lives. This becomes a family away from family quite fast!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Itâ€™s a science of ONE&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Listen to advice and criticism of your comedy, but donâ€™t necessarily take it to heart (especially if youâ€™re have an aversion to criticism). Every comic there has a different method of doing comedy, emulating their behavior and patterns is not going to get you the same place where it led them. Find your own science and process of doing things. This &lt;a href=&quot;https://www.youtube.com/watch?v=MANyX7woDPA&quot;&gt;video by Exurb1a&lt;/a&gt; is a good watch.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">I find it quite funny, that after finally setting on a blog style, specifically made for Machine Learning and Data Science style. I choose to write the first blog on here on Standup Comedy instead and my experience with it so far.</summary></entry></feed>